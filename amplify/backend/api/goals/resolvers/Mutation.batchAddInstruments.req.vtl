#set($batchInstrumentData = [])
#foreach($item in ${ctx.args.input})
  ## [Start] Set default values. **
  $util.qr($context.args.input.put("id", $util.defaultIfNull($item.id, $util.autoId())))
  #set( $createdAt = $util.time.nowISO8601() )
  ## Automatically set the createdAt timestamp. **
  $util.qr($context.args.input.put("createdAt", $util.defaultIfNull($item.createdAt, $createdAt)))
  ## Automatically set the updatedAt timestamp. **
  $util.qr($context.args.input.put("updatedAt", $util.defaultIfNull($item.updatedAt, $createdAt)))
  ## [End] Set default values. **
  ## [Start] Set the primary @key. **
  #set( $modelObjectKey = {
    "id": $util.dynamodb.toDynamoDB($item.id)
  } )
  ## [End] Set the primary @key. **

  ## [Start] Prepare DynamoDB PutItem Request. **
  $util.qr($context.args.input.put("__typename", "Instrument"))
  #if( $modelObjectKey )
    #set( $condition = {
    "expression": "",
    "expressionNames": {},
    "expressionValues": {}
  } )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put("expression", "attribute_not_exists(#keyCondition$velocityCount)"))
      #else
        $util.qr($condition.put("expression", "$condition.expression AND attribute_not_exists(#keyCondition$velocityCount)"))
      #end
      $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
    #end
  #else
    #set( $condition = {
    "expression": "attribute_not_exists(#id)",
    "expressionNames": {
        "#id": "id"
    },
    "expressionValues": {}
  } )
  #end
  #if( $context.args.condition )
    #set( $condition.expressionValues = {} )
    #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
    $util.qr($condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression"))
    $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
    $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
  #end
  #if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
    #set( $condition = {
    "expression": $condition.expression,
    "expressionNames": $condition.expressionNames
  } )
  #end
#end
{
  "version": "2018-05-29",
  "operation": "BatchWriteItem"
} #end,
  "attributeValues": $util.dynamodb.toMapValuesJson($context.args.input),
  "condition": $util.toJson($condition)
}
## [End] Prepare DynamoDB BatchWriteItem Request. **